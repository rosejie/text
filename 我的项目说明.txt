  对于软件开发这门课程，我大致有了一些了解。目前我们学习的git的使用主要是为了以后做项目时更好地管理代码。二整个软件开发这门课程可能主要是为
我们以后的工作提供便利而教授我们一些知识。
  我们软件工程这个专业以后很大的可能性要面对软件的开发，而现在的软件极大的方便了人们的日常生活，也可以说人们对于软件的需求越来越大。而这种
需求也就决定了需要更多的开发软件方面的人才。
  而关于软件的开发也可以说成是一个软件工程生产一个最终能满足需求且达到工程目标的软件产品所需要的步骤。软件工程过程主要包括开发过程、运作过
程、维护过程。它们覆盖了需求、设计、实现、确认以及维护等活动。而更好的管理剁成中的代码对程序员来说比较重要。软件工程是计算机领域发展最快的
学科分支之一，国家非常重视软件行业的发展，对软件人才的培养给予了非常优惠的政策。我认为，软件开发是一个环环相扣的设计和实施过程，整个系统开
发的过程当中，系统分析和设计是重中之重。
  对软件开发的三条感悟：
    1. 程序由多个模块构成。
    2. 各个模块由数据和组件构成。
    3. 在开发过程中，产生的测试文档应该保留，用来构建测试文档，组成软件的配置。
  如果我进入了一家公司，我想我不是对我的公司给我多少薪水给予多大的期望，而是你要把期望寄予去做好这件事，只要做的足够好，做到剑走偏锋你的薪
水可能就高了。
  软件开发团队中，技术不是万能的，但没有技术是万万不能的！在技术型团队中，技术与人品同等重要，当然长相也比较重要哈，尤其在mm比较多的团队
中。在软件项目团队中，技术水平是受人重视和尊重的重要砝码。无论你是做管理、系统分析、设计、编码，还是产品管理、测试、文档、实施、维护，多
少你都要有技术基础。算我孤陋寡闻，我还真没有亲眼看到过一个外行带领一个软件开发团队成功地完成过软件开发项目，哪怕就一个，也没有看到。倒是
曾经看到过一个“高学历的牛人”(非技术型)带一堆人做完过一个项目，项目交付的第二天，项目组成员扔下一句“再也受不了啦！”四分五裂、各奔东西。
那个项目的“成功度”大家可想而知了。
  心态有多开放，视野就有多开阔。不要抱着自己的技术和成果，等到它们都已经过时变成垃圾了，才拿出来丢人现眼。请及时发布自己的研究成果：开发的
产品、有创意的设计或代码，公布出来让大家交流或者使用，你的成果才有进化和升华的机会。想想自己XX年间开发的那些windows系统工具，5、6年之
后的今天，还是那个样子，今天流行的好多windows系统工具都比自己的晚，但进化得很好，且有那么多用户在使用。并且，不要保守自己的技术和思想，
尽可能地与人交流与分享，或者传授给开发团队的成员。“与人交换苹果之后，每个人还是只有一个苹果；但交换思想之后，每个人都拥有两种思想”，道
理大家都懂，但有多少人真正能做到呢？
  书到用时方恨少，不要将自己的知识面仅仅局限于技术方面。诺贝尔经济学奖得主西蒙教授的研究结果表明：“对于一个有一定基础的人来说，他只要真正
肯下功夫，在6个月内就可以掌握任何一门学问。”教育心理学界为感谢西蒙教授的研究成果，故命名为西蒙学习法。可见，掌握一门陌生的学问远远没有想
想的那么高难、深奥。多方吸取、广泛涉猎。极力夯实自己的影响圈、尽量扩大自己的关注圈。财务、经济税务、管理等等知识，有空花时间看看，韬光养
晦、未雨绸缪。
  理论与实践并重，内外双修。工程师的内涵是：以工程师的眼光观察、分析事物和世界。一个合格的软件工程师，是真正理解了软件产品的本质及软件产品
研发的思想精髓的人（个人观点、欢迎探讨）。掌握软件开发语言、应用语言工具解决工作中的具体问题、完成目标任务是软件工程师的主要工作，但从软
件工程师这个角度来看，这只是外在的东西，并非重要的、本质的工作。学习、掌握软件产品开发理论知识、软件开发方法论，并在实践中理解、应用软件产
品的分析、设计、实现思想来解决具体的软件产品研发问题，才是真正的软件工程师的工作。站在成熟理论与可靠方法论的高度思考、分析、解决问题，并
在具体实践中验证和修正这些思想与方式，最终形成自己的理论体系和实用方法论。
  我认为做为如此需要不断学习的我们需要详细制定自己软件开发专业知识学习计划，并注意及时修正和调整(软件开发技术变化实在太快)。请牢记：“如果
一个软件开发人员在1、2年内都没有更新过自己的知识，那么，其实他已经不再属于这个行业了。”不要告诉自己没有时间。来自时间管理领域的著名的“
三八原则”告诫我们：另外的那8小时如何使用将决定你的人生成败！本人自毕业以来，平均每天实际学习时间超过2小时。养成总结与反思的习惯，并有意
识地提炼日常工作成果，形成自己的个人源码库、解决某类问题的通用系统体系结构、甚至进化为框架。众所周知，对软件开发人员而言，有、无经验的一
个显著区别是：无经验者完成任何任务时都从头开始，而有经验者往往通过重组自己的可复用模块、类库来解决问题（其实这个结论不应该被局限在软件开
发领域、可以延伸到很多方面）。这并不是说，所有可复用的东西都必须自己实现，别人成熟的通过测试的成果也可以收集、整理、集成到自己的知识库中。
但是，最好还是自己实现，这样没有知识产权、版权等问题，关键是自己实现后能真正掌握这个知识点，拥有这个技能。

